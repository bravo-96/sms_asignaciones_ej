@model IEnumerable<SMS.Asignaciones.Frontend.Models.AsignacionesViewModel>


<div class="sombra-instructivo2">
    <table id="tAsignaciones" class="table table-bordered table-dark table-sm table-hover table-responsive-sm">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ColaboradorNombre)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ProovedorNombre)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ProyectoNombre)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.EquipoNombre)
                </th>
                <th style="width:150px;">
                    @Html.DisplayNameFor(model => model.Horas)
                </th>
                <th style="width:30px;">

                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>


                    <td style="vertical-align: middle;">
                        @Html.DisplayFor(modelItem => item.ColaboradorNombre)
                    </td>
                    <td style="vertical-align: middle; text-align: center;">
                        @{ if (item.ProovedorNombre.Contains("SMS"))
                            {
                                <span class='badge bg-danger text-white'>@item.ProovedorNombre</span>
                            }
                            else if (item.ProovedorNombre.Contains("Mono"))
                            {
                                <span class='badge bg-warning text-dark'>@item.ProovedorNombre</span>
                            }
                            else
                            {
                                <span class='badge bg-info text-dark'>@item.ProovedorNombre</span>
                            }

                        }
                    </td>
                    <td style="vertical-align: middle;">
                        @Html.DisplayFor(modelItem => item.ProyectoNombre)
                    </td>

                    <td style="vertical-align: middle;">
                        @Html.DisplayFor(modelItem => item.EquipoNombre)
                    </td>

                    <td style="vertical-align: middle; text-align:center;">
                        @Html.DisplayFor(modelItem => item.Horas) 


                    </td>
                    <td>
                        @{ if (item.Extras) {
                            <span class="badge badge-warning"> Extras</span>
                        } }
                    </td>

                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th colspan="4" style="text-align:right">Total:</th>
                <th></th>
            </tr>
        </tfoot>
    </table>
</div>

<script>

    $(document).ready(function () {



        $("#tAsignaciones").DataTable({
            "language": {
                "sProcessing": "Procesando...",
                "sLengthMenu": "Mostrar _MENU_ registros",
                "sZeroRecords": "No se encontraron resultados",
                "sEmptyTable": "Ningún dato disponible en esta tabla",
                "sInfo": "Mostrando  _END_ / _TOTAL_ registros",
                "sInfoEmpty": "Sin datos",
                "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                "sInfoPostFix": "",
                "sSearch": "Buscar:",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "Cargando...",
                "oPaginate": {
                    "sFirst": "Primero",
                    "sLast": "Último",
                    "sNext": "Siguiente",
                    "sPrevious": "Anterior"
                },
                "oAria": {
                    "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                },
            },
            "pagingType": "numbers",
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;

                // Remove the formatting to get integer data for summation
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                // Total over all pages
                total = api
                    .column(4)
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                // Total over this page
                pageTotal = api
                    .column(4, { page: 'current' })
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                // Update footer
                $(api.column(4).footer()).html(
                     pageTotal + 'Hs ('+ total + 'Hs)'
                );
            }
        });



    });
</script>